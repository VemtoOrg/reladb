export = Model;
declare class Model {
    static count(): any;
    static create(data?: {}): any;
    static fireRelationshipEvents(item: any, eventSuffix: any): void;
    static get(): any;
    static latest(): any;
    static find(id?: any): any;
    static findOrFail(id?: any): any;
    static removeSpecialData(data: any): {};
    static getQuery(): Query;
    static primaryKey(): string;
    static table(): any;
    static timestamps(): boolean;
    static orderBy(field: any, direction?: string): {
        new (data?: {}): import("./Model.js");
        count(): any;
        create(data?: {}): any;
        fireRelationshipEvents(item: any, eventSuffix: any): void;
        get(): any;
        latest(): any;
        find(id?: any): any;
        findOrFail(id?: any): any;
        removeSpecialData(data: any): {};
        getQuery(): Query;
        primaryKey(): string;
        table(): any;
        timestamps(): boolean;
        orderBy(field: any, direction?: string): any;
        initFilters(): void;
        clearFilters(): void;
        getFilters(): any;
    };
    static initFilters(): void;
    static clearFilters(): void;
    static getFilters(): any;
    constructor(data?: {});
    __returnRelationsAutomatically: boolean;
    __saveDataToStorage: boolean;
    __onUpdateListener: any;
    __customEventsEnabled: boolean;
    __set(obj: any, name: any, value: any): boolean;
    __get(obj: any, name: any): any;
    disableAutomaticRelations(): void;
    enableAutomaticRelations(): void;
    disableSavingData(): void;
    enableSavingData(): void;
    fillFromData(data?: {}, disablePrimaryKeyFill?: boolean): import("./Model.js");
    refresh(): import("./Model.js");
    fresh(): any;
    fill(data: any): import("./Model.js");
    save(): boolean | import("./Model.js");
    update(data?: {}): boolean;
    delete(): boolean;
    getTable(): any;
    getItemIdentifier(): string;
    getItemIdentifierData(): any;
    getTableData(): any;
    clearData(): void;
    relationships(): {};
    hasOne(model: any, foreignKey?: any, localKey?: any): HasOne;
    hasMany(model: any, foreignKey?: any, localKey?: any): HasMany;
    belongsTo(model: any, foreignKey?: any, ownerKey?: any): BelongsTo;
    belongsToMany(model: any, pivotModel?: any, foreignPivotKey?: any, relatedPivotKey?: any);
    morphMany(model, name, morphKey?: any, morphType?: any);
    morphTo(name, morphKey?: any, morphType?: any);
    hasRelationshipNamed(name: any): boolean;
    executeRelationship(name: any): any;
    hasBelongsToRelationships(): boolean;
    belongsToRelationships(): any[];
    belongsToManyRelationships(): any[];
    hasManyRelationships(): any[];
    hasOneRelationships(): any[];
    morphManyRelationships(): any[];
    morphToRelationships(): any[];
    hasSomethingRelationships(): any[];
    getRelationshipsByInstanceType(instanceOfClass: any): any[];
    relation(name: string): any;
    getRelationship(name: any): any;
    getRelationshipFunction(name: any): any;
    isSaved(): boolean;
    onUpdateListener(listener: any): import("./Model.js");
    addListener(name: any, listener: any): string;
    removeListener(name: any): import("./Model.js");
}
import HasOne = require("./Relationships/HasOne.js");
import HasMany = require("./Relationships/HasMany.js");
import BelongsTo = require("./Relationships/BelongsTo.js");
import Query = require("./Query.js");
//# sourceMappingURL=Model.d.ts.map